parameter (or (or (pair %balance_of (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))) (or (pair %mint (pair (address %address) (nat %amount)) (pair (map %metadata string bytes) (nat %token_id))) (address %set_administrator))) (or (or (pair %set_metadata (string %k) (bytes %v)) (bool %set_pause)) (or (list %transfer (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) (list %update_operators (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id))) (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))))));
storage   (pair (pair (pair (address %administrator) (nat %all_tokens)) (pair (big_map %ledger (pair address nat) nat) (big_map %metadata string bytes))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (bool %paused)) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))));
code
  {
    CAST (pair (or (or (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))) (or (pair (pair address nat) (pair (map string bytes) nat)) address)) (or (or (pair string bytes) bool) (or (list (pair address (list (pair address (pair nat nat))))) (list (or (pair address (pair address nat)) (pair address (pair address nat))))))) (pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))))); # pair (or (or (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))) (or (pair (pair address nat) (pair (map string bytes) nat)) address)) (or (or (pair string bytes) bool) (or (list (pair address (list (pair address (pair nat nat))))) (list (or (pair address (pair address nat)) (pair address (pair address nat))))))) (pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))))
    UNPAIR;     # or (or (pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))) (or (pair (pair address nat) (pair (map string bytes) nat)) address)) (or (or (pair string bytes) bool) (or (list (pair address (list (pair address (pair nat nat))))) (list (or (pair address (pair address nat)) (pair address (pair address nat)))))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
    IF_LEFT
      {
        IF_LEFT
          {
            SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))
            DUP;        # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat)))
            DUG 2;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
            GET 3;      # pair (big_map (pair address (pair address nat)) unit) bool : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
            CDR;        # bool : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
            IF
              {
                PUSH string "FA2_PAUSED"; # string : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                FAILWITH;   # FAILED
              }
              {}; # pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
            DUP;        # pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
            CAR;        # list (pair address nat) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
            MAP
              {
                DUP 3;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                GET 5;      # big_map nat (pair nat (map string bytes)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SWAP;       # pair address nat : big_map nat (pair nat (map string bytes)) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUP;        # pair address nat : pair address nat : big_map nat (pair nat (map string bytes)) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUG 2;      # pair address nat : big_map nat (pair nat (map string bytes)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CDR;        # nat : big_map nat (pair nat (map string bytes)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                MEM;        # bool : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                IF
                  {}
                  {
                    PUSH string "FA2_TOKEN_UNDEFINED"; # string : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    FAILWITH;   # FAILED
                  }; # pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUP 3;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                GET 3;      # big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SWAP;       # pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CDR;        # nat : pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SWAP;       # pair address nat : nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUP;        # pair address nat : pair address nat : nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUG 3;      # pair address nat : nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # address : nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                PAIR;       # pair address nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                MEM;        # bool : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                IF
                  {
                    DUP 3;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    GET 3;      # big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    SWAP;       # pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    CDR;        # nat : pair address nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    SWAP;       # pair address nat : nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    DUP;        # pair address nat : pair address nat : nat : big_map (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    DUG 3;      # pair address nat : nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    CAR;        # address : nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    PAIR;       # pair address nat : big_map (pair address nat) nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    GET;        # option nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    IF_NONE
                      {
                        PUSH int 425; # int : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    SWAP;       # pair address nat : @some : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    PAIR;       # pair (pair address nat) @some : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                  }
                  {
                    PUSH nat 0; # nat : pair address nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    SWAP;       # pair address nat : nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    PAIR;       # pair (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                  }; # pair (pair address nat) nat : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
              }; # list (pair (pair address nat) nat) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
            NIL operation; # list operation : list (pair (pair address nat) nat) : pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
            DIG 2;      # pair (list (pair address nat)) (contract (list (pair (pair address nat) nat))) : list operation : list (pair (pair address nat) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
            CDR;        # contract (list (pair (pair address nat) nat)) : list operation : list (pair (pair address nat) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
            PUSH mutez 0; # mutez : contract (list (pair (pair address nat) nat)) : list operation : list (pair (pair address nat) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
            DIG 3;      # list (pair (pair address nat) nat) : mutez : contract (list (pair (pair address nat) nat)) : list operation : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
            CONS;       # list operation : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
          }
          {
            IF_LEFT
              {
                SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                DUP;        # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                DUG 2;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair address nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # address : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SENDER;     # @sender : address : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                COMPARE;    # int : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                EQ;         # bool : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                IF
                  {}
                  {
                    PUSH string "FA2_NOT_ADMIN"; # string : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    FAILWITH;   # FAILED
                  }; # pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair address nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CDR;        # nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                PUSH nat 1; # nat : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                COMPARE;    # int : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                EQ;         # bool : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                IF
                  {}
                  {
                    PUSH string "NFT-asset: amount <> 1"; # string : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    FAILWITH;   # FAILED
                  }; # pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                DUP;        # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                DUG 2;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair address nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CDR;        # nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUG 2;      # pair (pair address nat) (pair (map string bytes) nat) : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                GET 4;      # nat : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                COMPARE;    # int : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                LT;         # bool : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                IF
                  {
                    PUSH string "NFT-asset: cannot mint twice same token"; # string : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    FAILWITH;   # FAILED
                  }
                  {}; # pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                DUP;        # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                DUG 2;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                GET 3;      # big_map (pair address nat) nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : big_map (pair address nat) nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : big_map (pair address nat) nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                GET 4;      # nat : pair (pair address nat) (pair (map string bytes) nat) : big_map (pair address nat) nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : nat : big_map (pair address nat) nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : nat : big_map (pair address nat) nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUG 3;      # pair (pair address nat) (pair (map string bytes) nat) : nat : big_map (pair address nat) nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair address nat : nat : big_map (pair address nat) nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # address : nat : big_map (pair address nat) nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                PAIR;       # pair address nat : big_map (pair address nat) nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                MEM;        # bool : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                IF
                  {
                    SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    UNPAIR;     # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    UNPAIR;     # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    SWAP;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    DIG 5;      # pair (pair address nat) (pair (map string bytes) nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                    DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                    GET 4;      # nat : pair (pair address nat) (pair (map string bytes) nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                    SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                    DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                    DUG 7;      # pair (pair address nat) (pair (map string bytes) nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    CAR;        # pair address nat : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    CAR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    GET;        # option nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    IF_NONE
                      {
                        PUSH int 535; # int : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    DUP 7;      # pair (pair address nat) (pair (map string bytes) nat) : @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    CAR;        # pair address nat : @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    CDR;        # nat : @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    ADD;        # nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    SOME;       # option nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    UPDATE;     # big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    SWAP;       # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    PAIR;       # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    PAIR;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                  }
                  {
                    SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    UNPAIR;     # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    UNPAIR;     # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    SWAP;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    DUP 5;      # pair (pair address nat) (pair (map string bytes) nat) : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    CAR;        # pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    CDR;        # nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    SOME;       # option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    DIG 5;      # pair (pair address nat) (pair (map string bytes) nat) : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                    DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                    GET 4;      # nat : pair (pair address nat) (pair (map string bytes) nat) : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                    SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                    DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                    DUG 7;      # pair (pair address nat) (pair (map string bytes) nat) : nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    CAR;        # pair address nat : nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    CAR;        # address : nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    UPDATE;     # big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    SWAP;       # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    PAIR;       # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    PAIR;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                  }; # pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                DUP;        # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                DUG 2;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair address nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CDR;        # nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUG 2;      # pair (pair address nat) (pair (map string bytes) nat) : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                GET 4;      # nat : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                COMPARE;    # int : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                LT;         # bool : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                IF
                  {}
                  {
                    DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    GET 4;      # nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    DUP 3;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    CAR;        # pair address nat : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    CDR;        # nat : nat : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    COMPARE;    # int : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    EQ;         # bool : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    IF
                      {}
                      {
                        PUSH string "Token-IDs should be consecutive"; # string : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        FAILWITH;   # FAILED
                      }; # pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    UNPAIR;     # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    UNPAIR;     # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    CAR;        # address : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    PUSH nat 1; # nat : address : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    DUP 5;      # pair (pair address nat) (pair (map string bytes) nat) : nat : address : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    GET 4;      # nat : nat : address : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    ADD;        # nat : address : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    SWAP;       # address : nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    PAIR;       # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    PAIR;       # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (map string bytes) nat)
                    PAIR;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    DUP;        # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    GET 5;      # big_map nat (pair nat (map string bytes)) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    DIG 2;      # pair (pair address nat) (pair (map string bytes) nat) : big_map nat (pair nat (map string bytes)) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : big_map nat (pair nat (map string bytes)) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    GET 3;      # map string bytes : pair (pair address nat) (pair (map string bytes) nat) : big_map nat (pair nat (map string bytes)) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    DUP;        # pair (pair address nat) (pair (map string bytes) nat) : pair (pair address nat) (pair (map string bytes) nat) : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    DUG 4;      # pair (pair address nat) (pair (map string bytes) nat) : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    GET 4;      # nat : map string bytes : big_map nat (pair nat (map string bytes)) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    PAIR;       # pair nat (map string bytes) : big_map nat (pair nat (map string bytes)) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    SOME;       # option (pair nat (map string bytes)) : big_map nat (pair nat (map string bytes)) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    DUP 4;      # pair (pair address nat) (pair (map string bytes) nat) : option (pair nat (map string bytes)) : big_map nat (pair nat (map string bytes)) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    GET 4;      # nat : option (pair nat (map string bytes)) : big_map nat (pair nat (map string bytes)) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    UPDATE;     # big_map nat (pair nat (map string bytes)) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    UPDATE 5;   # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                    SWAP;       # pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                  }; # pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                DUP;        # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                DUG 2;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUP;        # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                GET 6;      # big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DIG 3;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                GET 6;      # big_map nat nat : big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                DUP 4;      # pair (pair address nat) (pair (map string bytes) nat) : big_map nat nat : big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                GET 4;      # nat : big_map nat nat : big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                GET;        # option nat : big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                IF_NONE
                  {
                    PUSH nat 0; # nat : big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                  }
                  {}; # nat : big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                DUP 4;      # pair (pair address nat) (pair (map string bytes) nat) : nat : big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                CAR;        # pair address nat : nat : big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                CDR;        # nat : nat : big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                ADD;        # nat : big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                SOME;       # option nat : big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair address nat) (pair (map string bytes) nat)
                DIG 3;      # pair (pair address nat) (pair (map string bytes) nat) : option nat : big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                GET 4;      # nat : option nat : big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                UPDATE;     # big_map nat nat : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                UPDATE 6;   # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
              }
              {
                SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : address
                DUP;        # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : address
                DUG 2;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : address : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : address : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair address nat : address : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # address : address : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SENDER;     # @sender : address : address : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                COMPARE;    # int : address : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                EQ;         # bool : address : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                IF
                  {}
                  {
                    PUSH string "FA2_NOT_ADMIN"; # string : address : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    FAILWITH;   # FAILED
                  }; # address : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : address
                UNPAIR;     # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : address
                UNPAIR;     # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : address
                CDR;        # nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : address
                DIG 3;      # address : nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                PAIR;       # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                PAIR;       # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                PAIR;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
              }; # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
            NIL operation; # list operation : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
          }; # list operation : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair string bytes
                DUP;        # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair string bytes
                DUG 2;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair string bytes : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair string bytes : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair address nat : pair string bytes : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # address : pair string bytes : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SENDER;     # @sender : address : pair string bytes : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                COMPARE;    # int : pair string bytes : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                EQ;         # bool : pair string bytes : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                IF
                  {}
                  {
                    PUSH string "FA2_NOT_ADMIN"; # string : pair string bytes : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    FAILWITH;   # FAILED
                  }; # pair string bytes : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair string bytes
                UNPAIR;     # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair string bytes
                UNPAIR;     # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair string bytes
                SWAP;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair string bytes
                UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair string bytes
                SWAP;       # big_map string bytes : big_map (pair address nat) nat : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair string bytes
                DUP 5;      # pair string bytes : big_map string bytes : big_map (pair address nat) nat : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair string bytes
                CDR;        # bytes : big_map string bytes : big_map (pair address nat) nat : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair string bytes
                SOME;       # option bytes : big_map string bytes : big_map (pair address nat) nat : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair string bytes
                DIG 5;      # pair string bytes : option bytes : big_map string bytes : big_map (pair address nat) nat : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                CAR;        # string : option bytes : big_map string bytes : big_map (pair address nat) nat : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                UPDATE;     # big_map string bytes : big_map (pair address nat) nat : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                SWAP;       # big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                SWAP;       # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                PAIR;       # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                PAIR;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
              }
              {
                SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : bool
                DUP;        # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : bool
                DUG 2;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : bool : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : bool : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # pair address nat : bool : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CAR;        # address : bool : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SENDER;     # @sender : address : bool : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                COMPARE;    # int : bool : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                EQ;         # bool : bool : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                IF
                  {}
                  {
                    PUSH string "FA2_NOT_ADMIN"; # string : bool : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    FAILWITH;   # FAILED
                  }; # bool : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : bool
                UNPAIR;     # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : bool
                SWAP;       # pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : bool
                UNPAIR;     # pair (big_map (pair address (pair address nat)) unit) bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : bool
                CAR;        # big_map (pair address (pair address nat)) unit : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : bool
                DIG 3;      # bool : big_map (pair address (pair address nat)) unit : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))
                SWAP;       # big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))
                PAIR;       # pair (big_map (pair address (pair address nat)) unit) bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))
                PAIR;       # pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))
                SWAP;       # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))
                PAIR;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
              }; # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
          }
          {
            IF_LEFT
              {
                SWAP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : list (pair address (list (pair address (pair nat nat))))
                DUP;        # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : list (pair address (list (pair address (pair nat nat))))
                DUG 2;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                GET 3;      # pair (big_map (pair address (pair address nat)) unit) bool : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                CDR;        # bool : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                IF
                  {
                    PUSH string "FA2_PAUSED"; # string : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    FAILWITH;   # FAILED
                  }
                  {}; # list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DUP;        # list (pair address (list (pair address (pair nat nat)))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                ITER
                  {
                    DUP;        # pair address (list (pair address (pair nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    CDR;        # list (pair address (pair nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    ITER
                      {
                        DUP 4;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        CAR;        # pair address nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        CAR;        # address : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        SENDER;     # @sender : address : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        COMPARE;    # int : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        EQ;         # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        IF
                          {
                            PUSH bool True; # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                          }
                          {
                            SENDER;     # @sender : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUP 3;      # pair address (list (pair address (pair nat nat))) : @sender : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            CAR;        # address : @sender : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            COMPARE;    # int : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            EQ;         # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                          }; # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        IF
                          {
                            PUSH bool True; # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                          }
                          {
                            DUP 4;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            GET 3;      # pair (big_map (pair address (pair address nat)) unit) bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            CAR;        # big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            SWAP;       # pair address (pair nat nat) : big_map (pair address (pair address nat)) unit : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : big_map (pair address (pair address nat)) unit : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUG 2;      # pair address (pair nat nat) : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            GET 3;      # nat : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            SENDER;     # @sender : nat : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUP 5;      # pair address (list (pair address (pair nat nat))) : @sender : nat : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            CAR;        # address : @sender : nat : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            PAIR 3;     # pair address (pair @sender nat) : big_map (pair address (pair address nat)) unit : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            MEM;        # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                          }; # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        IF
                          {}
                          {
                            PUSH string "FA2_NOT_OPERATOR"; # string : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            FAILWITH;   # FAILED
                          }; # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        DUP 4;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        GET 5;      # big_map nat (pair nat (map string bytes)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        SWAP;       # pair address (pair nat nat) : big_map nat (pair nat (map string bytes)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : big_map nat (pair nat (map string bytes)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        DUG 2;      # pair address (pair nat nat) : big_map nat (pair nat (map string bytes)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        GET 3;      # nat : big_map nat (pair nat (map string bytes)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        MEM;        # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        IF
                          {}
                          {
                            PUSH string "FA2_TOKEN_UNDEFINED"; # string : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            FAILWITH;   # FAILED
                          }; # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        GET 4;      # nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        PUSH nat 0; # nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        COMPARE;    # int : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        LT;         # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        IF
                          {
                            DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            GET 4;      # nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUP 5;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            GET 3;      # big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUP 3;      # pair address (pair nat nat) : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            GET 3;      # nat : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUP 5;      # pair address (list (pair address (pair nat nat))) : nat : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            CAR;        # address : nat : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            PAIR;       # pair address nat : big_map (pair address nat) nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            GET;        # option nat : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            IF_NONE
                              {
                                PUSH int 403; # int : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            COMPARE;    # int : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            GE;         # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            IF
                              {}
                              {
                                PUSH string "FA2_INSUFFICIENT_BALANCE"; # string : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                                FAILWITH;   # FAILED
                              }; # pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUP 4;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            UNPAIR;     # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            UNPAIR;     # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            SWAP;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUP 6;      # pair address (pair nat nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            GET 3;      # nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUP 8;      # pair address (list (pair address (pair nat nat))) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            CAR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            GET;        # option nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            IF_NONE
                              {
                                PUSH int 407; # int : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                                FAILWITH;   # FAILED
                              }
                              {
                                DROP;       # pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                              }; # pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUP 6;      # pair address (pair nat nat) : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            GET 4;      # nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DIG 9;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            GET 3;      # big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            DUP 8;      # pair address (pair nat nat) : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            GET 3;      # nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            DUP 10;     # pair address (list (pair address (pair nat nat))) : nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            CAR;        # address : nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            PAIR;       # pair address nat : big_map (pair address nat) nat : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            GET;        # option nat : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            IF_NONE
                              {
                                PUSH int 407; # int : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            SUB;        # int : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            ISNAT;      # option nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            IF_NONE
                              {
                                PUSH int 407; # int : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            SOME;       # option nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            UPDATE;     # big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            SWAP;       # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            PAIR;       # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            PAIR;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            DUP;        # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                            DUG 4;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            GET 3;      # big_map (pair address nat) nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            SWAP;       # pair address (pair nat nat) : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            GET 3;      # nat : pair address (pair nat nat) : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            SWAP;       # pair address (pair nat nat) : nat : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : nat : big_map (pair address nat) nat : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            DUG 3;      # pair address (pair nat nat) : nat : big_map (pair address nat) nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            CAR;        # address : nat : big_map (pair address nat) nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            PAIR;       # pair address nat : big_map (pair address nat) nat : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            MEM;        # bool : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            IF
                              {
                                DIG 3;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UNPAIR;     # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UNPAIR;     # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SWAP;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DIG 5;      # pair address (pair nat nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                GET 3;      # nat : pair address (pair nat nat) : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SWAP;       # pair address (pair nat nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUG 7;      # pair address (pair nat nat) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                CAR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                GET;        # option nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                IF_NONE
                                  {
                                    PUSH int 410; # int : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DIG 6;      # pair address (pair nat nat) : @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                GET 4;      # nat : @some : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                ADD;        # nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SOME;       # option nat : pair address nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UPDATE;     # big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SWAP;       # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUG 2;      # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                              }
                              {
                                DIG 3;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UNPAIR;     # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UNPAIR;     # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SWAP;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UNPAIR;     # big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUP 5;      # pair address (pair nat nat) : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                GET 4;      # nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SOME;       # option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair nat nat) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DIG 5;      # pair address (pair nat nat) : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUP;        # pair address (pair nat nat) : pair address (pair nat nat) : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                GET 3;      # nat : pair address (pair nat nat) : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SWAP;       # pair address (pair nat nat) : nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                CAR;        # address : nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                UPDATE;     # big_map (pair address nat) nat : big_map string bytes : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair (big_map (pair address nat) nat) (big_map string bytes) : pair address nat : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                SWAP;       # pair address nat : pair (big_map (pair address nat) nat) (big_map string bytes) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                PAIR;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat))))
                                DUG 2;      # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                              }; # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                          }
                          {
                            DROP;       # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                          }; # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                      }; # pair address (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                    DROP;       # list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                  }; # list (pair address (list (pair address (pair nat nat)))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DROP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
              }
              {
                DUP;        # list (or (pair address (pair address nat)) (pair address (pair address nat))) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                ITER
                  {
                    IF_LEFT
                      {
                        DUP;        # pair address (pair address nat) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        CAR;        # address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        SENDER;     # @sender : address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        COMPARE;    # int : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        EQ;         # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        IF
                          {
                            PUSH bool True; # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                          }
                          {
                            DUP 3;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            CAR;        # pair address nat : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            CAR;        # address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            SENDER;     # @sender : address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            COMPARE;    # int : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            EQ;         # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                          }; # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        IF
                          {}
                          {
                            PUSH string "FA2_NOT_ADMIN_OR_OPERATOR"; # string : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            FAILWITH;   # FAILED
                          }; # pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        DIG 2;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UNPAIR;     # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UNPAIR;     # pair (big_map (pair address (pair address nat)) unit) bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UNPAIR;     # big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PUSH (option unit) (Some Unit); # option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        DIG 5;      # pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        DUP;        # pair address (pair address nat) : pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        GET 4;      # nat : pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        DUP;        # pair address (pair address nat) : pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        GET 3;      # address : pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair address (pair address nat) : address : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        CAR;        # address : address : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR 3;     # pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UPDATE;     # big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR;       # pair (big_map (pair address (pair address nat)) unit) bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR;       # pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                      }
                      {
                        DUP;        # pair address (pair address nat) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        CAR;        # address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        SENDER;     # @sender : address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        COMPARE;    # int : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        EQ;         # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        IF
                          {
                            PUSH bool True; # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                          }
                          {
                            DUP 3;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            CAR;        # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            CAR;        # pair address nat : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            CAR;        # address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            SENDER;     # @sender : address : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            COMPARE;    # int : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            EQ;         # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                          }; # bool : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        IF
                          {}
                          {
                            PUSH string "FA2_NOT_ADMIN_OR_OPERATOR"; # string : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                            FAILWITH;   # FAILED
                          }; # pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                        DIG 2;      # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UNPAIR;     # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UNPAIR;     # pair (big_map (pair address (pair address nat)) unit) bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UNPAIR;     # big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        NONE unit;  # option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair address (pair address nat) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        DIG 5;      # pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        DUP;        # pair address (pair address nat) : pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        GET 4;      # nat : pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        DUP;        # pair address (pair address nat) : pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        GET 3;      # address : pair address (pair address nat) : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair address (pair address nat) : address : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        CAR;        # address : address : nat : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR 3;     # pair address (pair address nat) : option unit : big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        UPDATE;     # big_map (pair address (pair address nat)) unit : bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR;       # pair (big_map (pair address (pair address nat)) unit) bool : pair (big_map nat (pair nat (map string bytes))) (big_map nat nat) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR;       # pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes)) : pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        PAIR;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))) : list (or (pair address (pair address nat)) (pair address (pair address nat)))
                        SWAP;       # list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                      }; # list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                  }; # list (or (pair address (pair address nat)) (pair address (pair address nat))) : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
                DROP;       # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
              }; # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
          }; # pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
        NIL operation; # list operation : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
      }; # list operation : pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat)))
    PAIR;       # pair (list operation) (pair (pair (pair address nat) (pair (big_map (pair address nat) nat) (big_map string bytes))) (pair (pair (big_map (pair address (pair address nat)) unit) bool) (pair (big_map nat (pair nat (map string bytes))) (big_map nat nat))))
  };